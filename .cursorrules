# EcoMapper Cursor Rules

## Project Overview
EcoMapper is an Ionic React mobile application for crowdsourced environmental and cultural mapping. It enables users to map and document environmental features and cultural points of interest with offline-first capabilities.

## Technology Stack
- Ionic 7.5.4 with React 18.2.0
- TypeScript 5.2.2
- React-Leaflet 4.2.1 for maps
- Supabase 2.39.0 for backend
- Capacitor 5.5.1 for native functionality
- Dexie.js 3.2.4 for IndexedDB/offline storage
- Zustand 4.4.6 for state management

## Development Guidelines

### Package Management
- Use pnpm for package management
- Maintain exact version numbers in package.json
- Run `pnpm install` after adding new dependencies

### Code Organization
- Follow the established project structure in project-structure.md
- Place components in the appropriate subdirectory:
  - Core UI components in src/components/core
  - Feature-specific components in src/components/features
  - Layout components in src/components/layout
  - Map-related components in src/components/map
- Use TypeScript interfaces and types for all data structures

### Map Implementation
- Use React-Leaflet for map components
- Optimize for mobile with consideration for:
  - Battery usage
  - Offline capability
  - Performance with many markers
- Implement marker clustering for efficient rendering
- Use Capacitor Geolocation for accurate user location

### Authentication & Data
- Use Supabase authentication with proper session management
- Implement offline-first strategy with Dexie.js
- Design sync mechanisms for offline data
- Follow row-level security patterns in Supabase
- Use PostGIS for geospatial queries

### State Management
- Use React Context for global app state
- Use Zustand for complex state management
- Implement custom hooks for reusable logic

### Styling
- Use Ionic components as the base UI library
- Follow responsive design principles for all screens
- Implement custom CSS with CSS Modules
- Maintain consistent theming via CSS variables

### Native Features
- Use Capacitor plugins for:
  - Camera access
  - Geolocation
  - Storage
  - Network detection
  - Device information

## AI Development Tasks

When asked to implement features for this project, follow these guidelines:

### For Map Features
- Implement React-Leaflet components with proper TypeScript typing
- Ensure map events are properly typed and handled
- Consider offline-first approach with map tile caching
- Optimize performance for mobile devices
- Implement proper geolocation error handling
- Follow the pattern in MapContext.tsx for state management

### For Authentication Features
- Use Supabase Auth methods with proper error handling
- Implement protected routes for authenticated content
- Store and refresh session tokens securely
- Handle offline authentication scenarios
- Follow the pattern in AuthContext.tsx

### For Data Management
- Use the established DB schema from supabase-setup.md
- Implement offline storage with Dexie.js
- Create sync mechanisms for offline/online transitions
- Add proper validation for form submissions
- Follow the pattern in OfflineContext.tsx

### For UI Components
- Use Ionic components as base elements
- Implement responsive layouts for various screen sizes
- Add proper loading states and error handling
- Ensure accessibility compliance
- Follow component patterns in development-guide.md

### For Native Features
- Use Capacitor plugins with proper error handling
- Implement permission requests with clear user messaging
- Consider battery and data usage optimization
- Test on both Android and iOS platforms

## Implementation Checklist

When implementing any feature, ensure:

1. TypeScript types are properly defined
2. Error handling is comprehensive
3. Loading states are handled
4. Offline scenarios are considered
5. Battery and performance optimization is addressed
6. Component follows established patterns
7. Tests are included where appropriate

## Resources
For additional guidance, refer to:
- /guides/development-guide.md - Implementation tips for specific features
- /guides/project-structure.md - Overview of codebase organization
- /guides/supabase-setup.md - Backend structure and SQL schemas
- /guides/implementation-plan.md - Project roadmap and feature priorities